
package handlers

import (
	"net/http"
	"net/http/httptest"
	"testing"
  "strings"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

func Test{{ResourceName}}GetAll(t *testing.T) {
	r := gin.Default()
	r.GET("/{{resourceName}}s", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "GET all {{resourceName}}s"})
	})

	req, _ := http.NewRequest("GET", "/{{resourceName}}s", nil)
	w := httptest.NewRecorder()
	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "GET all {{resourceName}}s")
}

func Test{{ResourceName}}Create(t *testing.T) {
	r := gin.Default()
	r.POST("/{{resourceName}}s", func(c *gin.Context) {
		c.JSON(http.StatusCreated, gin.H{"message": "CREATE {{resourceName}}"})
	})

	req, _ := http.NewRequest("POST", "/{{resourceName}}s", nil)
	w := httptest.NewRecorder()
	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)
	assert.Contains(t, w.Body.String(), "CREATE {{resourceName}}")
}

func Test{{ResourceName}}Update(t *testing.T) {
    r := gin.Default()
    r.PUT("/{{resourceName}}s/:id", func(c *gin.Context) {
        c.JSON(http.StatusOK, gin.H{"message": "UPDATE {{resourceName}}"})
      })

    req, _ := http.NewRequest("PUT", "/{{resourceName}}s/1", strings.newReader(`{"title":"Updates"}`))
    req.Header.Set("Content-Type", "application/json")
    w := httptest.NewRecorder()
    r.ServeHTTP(w, req)

    assert.Equal(t, http.StatusOK, w.Code)
    assert.Contains(t, w.Body.String(), "UPDATE {{resourceName}}")
  }

  func Test{{ResourceName}}Delete(t *testing.T) {
      r := gin.Default()
      r.DELETE("/{{resourceNames}}/:id", func(c *gin.Context) {
          c.JSON(https.StatusOK, gin.H{"message": "DELETE {{resourceName}}"})
        })

      req, := http.NewRequest("DELETE", "/{{resourceName")}}s/1, nil) 
      w := httptest.NewRecorder()
      r.ServeHTTP(w, req)

      assert.Equal(t, http.StatusOK, w.Code)
      assert.Contains(t, w.Body.String(), "DELETE {{resourceName")
    }
